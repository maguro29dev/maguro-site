---
layout: base
permalink: /admin/
---

<div class="container mx-auto p-4">

    <!-- ローディング表示 -->
    <div id="loading-spinner" class="text-center py-10">
        <p class="text-gray-600">認証情報を確認中...</p>
    </div>

    <!-- ログインボタン -->
    <div id="login-area" class="max-w-md mx-auto my-10 text-center" style="display: none;">
        <h1 class="text-2xl font-bold mb-6">管理者ログイン</h1>
        <button id="login-btn" class="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow inline-flex items-center">
            <img src="https://www.google.com/favicon.ico" alt="Google icon" class="w-5 h-5 mr-2">
            <span>Googleでログイン</span>
        </button>
    </div>

    <!-- 管理者コンテンツ -->
    <div id="admin-content" style="display: none;">
        <h1 class="text-2xl font-bold mb-4">管理ページ</h1>
        <p class="mb-4">ようこそ、管理者さん。</p>
        <button id="logout-btn" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mb-8">
            ログアウト
        </button>

        <!-- Push Notification Form -->
        <div class="mt-8">
            <h2 class="text-xl font-semibold mb-2">プッシュ通知を送信</h2>
            <form id="notification-form" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="title">
                        タイトル
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="title" name="title" type="text" placeholder="通知タイトル" required>
                </div>
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="body">
                        本文
                    </label>
                    <textarea class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="body" name="body" placeholder="通知メッセージ" required></textarea>
                </div>
                <div class="mb-6">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="url">
                        URL（通知クリック時の遷移先）
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="url" name="url" type="url" placeholder="https://example.com">
                </div>
                <div class="flex items-center justify-between">
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                        通知を送信
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- ▼▼▼ ここからが今回の追加箇所 ▼▼▼ -->
    <!-- 確認モーダル -->
    <div id="confirmation-modal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center" style="display: none; z-index: 9999;">
      <div class="bg-white p-8 rounded-lg shadow-xl w-11/12 md:max-w-md mx-auto">
        <h2 class="text-xl font-bold mb-4">送信内容の確認</h2>
        <div class="mb-6 space-y-3">
          <div>
            <p class="font-semibold text-gray-700">タイトル:</p>
            <p id="confirm-title" class="text-gray-800 bg-gray-100 p-2 rounded"></p>
          </div>
          <div>
            <p class="font-semibold text-gray-700">本文:</p>
            <p id="confirm-body" class="text-gray-800 bg-gray-100 p-2 rounded whitespace-pre-wrap"></p>
          </div>
          <div>
            <p class="font-semibold text-gray-700">URL:</p>
            <p id="confirm-url" class="text-gray-800 bg-gray-100 p-2 rounded break-all"></p>
          </div>
        </div>
        <div class="flex justify-end space-x-4">
          <button id="cancel-btn" class="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded">
            キャンセル
          </button>
          <button id="confirm-send-btn" class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded">
            はい、送信します
          </button>
        </div>
        <div id="modal-sending-message" class="text-center mt-4 text-blue-600" style="display: none;">送信中です...</div>
      </div>
    </div>
    <!-- ▲▲▲ 追加箇所ここまで ▲▲▲ -->
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
    import { getAuth, onAuthStateChanged, signOut, GoogleAuthProvider, signInWithPopup } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-auth.js";

    const firebaseConfig = {
      apiKey: "AIzaSyDwjh5FCorVXZDdMse_uTcLbvjXwmw2jhk",
      authDomain: "maguro29-planning.firebaseapp.com",
      projectId: "maguro29-planning",
      storageBucket: "maguro29-planning.firebasestorage.app",
      messagingSenderId: "525505583082",
      appId: "1:525505583082:web:2cb02294dfd3d9ca91c493"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);

    const loginBtn = document.getElementById('login-btn');
    const logoutBtn = document.getElementById('logout-btn');
    const adminContent = document.getElementById('admin-content');
    const loadingSpinner = document.getElementById('loading-spinner');
    const notificationForm = document.getElementById('notification-form');
    const loginArea = document.getElementById('login-area');
    
    // ▼▼▼ ここからが今回の修正箇所 ▼▼▼
    const modal = document.getElementById('confirmation-modal');
    const confirmSendBtn = document.getElementById('confirm-send-btn');
    const cancelBtn = document.getElementById('cancel-btn');
    const modalSendingMessage = document.getElementById('modal-sending-message');

    // フォームが送信されたときの処理
    notificationForm.addEventListener('submit', (event) => {
        event.preventDefault(); // 本来のフォーム送信をキャンセル
        
        // フォームの内容を取得
        const title = notificationForm.title.value;
        const body = notificationForm.body.value;
        const url = notificationForm.url.value;

        // モーダルに内容を表示
        document.getElementById('confirm-title').textContent = title;
        document.getElementById('confirm-body').textContent = body;
        document.getElementById('confirm-url').textContent = url || '(未入力)';

        // モーダルを表示
        modal.style.display = 'flex';
    });

    // キャンセルボタンの処理
    cancelBtn.addEventListener('click', () => {
        modal.style.display = 'none';
        modalSendingMessage.style.display = 'none';
        confirmSendBtn.disabled = false;
    });
    
    // 「はい、送信します」ボタンが押されたときの処理
    confirmSendBtn.addEventListener('click', async () => {
        const user = auth.currentUser;
        if (!user) {
            alert('ログインしていません。再度ログインしてください。');
            modal.style.display = 'none';
            return;
        }

        // 送信中の表示
        modalSendingMessage.style.display = 'block';
        confirmSendBtn.disabled = true;

        const title = document.getElementById('confirm-title').textContent;
        const body = document.getElementById('confirm-body').textContent;
        let url = document.getElementById('confirm-url').textContent;
        if (url === '(未入力)') url = '';

        try {
            const idToken = await user.getIdToken(true);
            const response = await fetch('/.netlify/functions/send-push', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${idToken}`
                },
                body: JSON.stringify({ title, body, url })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({ details: response.statusText }));
                throw new Error(`通知の送信に失敗しました (Status: ${response.status}). ${errorData.details}`);
            }

            const result = await response.json();
            alert(`通知が送信されました！\nサーバーからのメッセージ: ${result.message}`);
            notificationForm.reset();
        } catch (error) {
            console.error('送信エラー:', error);
            alert(`エラーが発生しました: ${error.message}`);
        } finally {
            // モーダルを閉じて初期状態に戻す
            modal.style.display = 'none';
            modalSendingMessage.style.display = 'none';
            confirmSendBtn.disabled = false;
        }
    });
    // ▲▲▲ 修正箇所ここまで ▲▲▲

    // --- 既存のログイン・ログアウト処理 ---
    function updateUI(user) {
        loadingSpinner.style.display = 'none';
        if (user) {
            adminContent.style.display = 'block';
            loginArea.style.display = 'none';
        } else {
            adminContent.style.display = 'none';
            loginArea.style.display = 'block';
        }
    }

    onAuthStateChanged(auth, user => {
      updateUI(user);
    });
    
    loginBtn.addEventListener('click', () => {
        const provider = new GoogleAuthProvider();
        signInWithPopup(auth, provider)
            .catch(error => {
                console.error("ログインエラー:", error);
                alert("ログインに失敗しました。");
            });
    });

    logoutBtn.addEventListener('click', () => {
        signOut(auth).catch(error => console.error("ログアウト失敗:", error));
    });
</script>

