---
layout: base
permalink: /admin/
---

<div class="container mx-auto p-4">

    <!-- ローディング表示 -->
    <div id="loading" class="text-center py-10">
        <p class="text-gray-600">認証情報を確認中...</p>
    </div>

    <!-- ログインボタン (初期状態では非表示) -->
    <div id="login-area" class="max-w-md mx-auto my-10 text-center" style="display: none;">
        <h1 class="text-2xl font-bold mb-6">管理者ログイン</h1>
        <button id="google-login-button" class="bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow inline-flex items-center">
            <img src="https://www.google.com/favicon.ico" alt="Google icon" class="w-5 h-5 mr-2">
            <span>Googleでログイン</span>
        </button>
        <p id="login-error" class="text-red-500 text-xs italic mt-4"></p>
        <p id="auth-status" class="text-gray-600 mt-4"></p>
    </div>

    <!-- 管理者コンテンツ (初期状態では非表示) -->
    <div id="admin-content" style="display: none;">
        <h1 class="text-2xl font-bold mb-4">管理ページ</h1>
        <p class="mb-4">ようこそ、管理者さん。</p>
        <button id="logout-button" class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline mb-8">
            ログアウト
        </button>

        <!-- Push Notification Form -->
        <div class="mt-8">
            <h2 class="text-xl font-semibold mb-2">プッシュ通知を送信</h2>
            <form id="push-form" class="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
                <div class="mb-4">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="push-title">
                        タイトル
                    </label>
                    <input class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline" id="push-title" type="text" placeholder="通知タイトル">
                </div>
                <div class="mb-6">
                    <label class="block text-gray-700 text-sm font-bold mb-2" for="push-body">
                        本文
                    </label>
                    <textarea class="shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 mb-3 leading-tight focus:outline-none focus:shadow-outline" id="push-body" placeholder="通知メッセージ"></textarea>
                </div>
                <div class="flex items-center justify-between">
                    <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline" type="submit">
                        送信
                    </button>
                </div>
            </form>
            <p id="push-result"></p>
        </div>
    </div>
</div>

<!-- Firebase SDK -->
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/8.10.1/firebase-auth.js"></script>

<script>
    // ▼▼▼【要設定】ご自身のFirebaseプロジェクトの設定情報を貼り付けてください▼▼▼
    const firebaseConfig = {
      apiKey: "YOUR_API_KEY",
      authDomain: "YOUR_AUTH_DOMAIN",
      projectId: "YOUR_PROJECT_ID",
      storageBucket: "YOUR_STORAGE_BUCKET",
      messagingSenderId: "YOUR_MESSAGING_SENDER_ID",
      appId: "YOUR_APP_ID"
    };
    // ▲▲▲【要設定】ご自身のFirebaseプロジェクトの設定情報を貼り付けてください▲▲▲

    // ▼▼▼【重要】管理者として許可するユーザーのUIDを設定してください▼▼▼
    const ADMIN_UIDS = ["ここに管理者ユーザーのUIDを貼り付け"]; 
    // ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲

    // Firebaseを初期化
    if (!firebase.apps.length) {
        firebase.initializeApp(firebaseConfig);
    }
    const auth = firebase.auth();

    // UI要素を取得
    const loading = document.getElementById('loading');
    const loginArea = document.getElementById('login-area');
    const adminContent = document.getElementById('admin-content');
    const googleLoginButton = document.getElementById('google-login-button');
    const logoutButton = document.getElementById('logout-button');
    const loginError = document.getElementById('login-error');
    const authStatus = document.getElementById('auth-status');

    // 認証状態の監視
    auth.onAuthStateChanged(user => {
        loading.style.display = 'none'; // まずローディングを非表示

        if (user) {
            // ログイン済みの場合、管理者UIDかどうかをチェック
            if (ADMIN_UIDS.includes(user.uid)) {
                // 管理者の場合
                adminContent.style.display = 'block';
                authStatus.textContent = '';
            } else {
                // 管理者ではない一般ユーザーの場合
                loginArea.style.display = 'block';
                loginError.textContent = '管理者権限がありません。';
                authStatus.textContent = `${user.displayName}としてログインしていますが、アクセス権がありません。`;
                // 必要であれば、ここで自動的にログアウトさせることも可能です
                // auth.signOut(); 
            }
        } else {
            // 未ログインの場合
            loginArea.style.display = 'block';
            loginError.textContent = '';
            authStatus.textContent = '';
        }
    });

    // Googleログイン処理
    googleLoginButton.addEventListener('click', () => {
        const provider = new firebase.auth.GoogleAuthProvider();
        auth.signInWithPopup(provider)
            .catch(error => {
                console.error("Googleログインエラー:", error);
                loginError.textContent = 'ログインに失敗しました。';
            });
    });

    // ログアウト処理
    logoutButton.addEventListener('click', () => {
        auth.signOut();
    });


    // プッシュ通知フォームの処理 (既存のコード)
    document.getElementById('push-form').addEventListener('submit', async (event) => {
        event.preventDefault();
        const title = document.getElementById('push-title').value;
        const body = document.getElementById('push-body').value;
        const resultElement = document.getElementById('push-result');

        resultElement.textContent = '送信中...';

        try {
            const response = await fetch('/.netlify/functions/send-push', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ title, body }),
            });

            if (response.ok) {
                resultElement.textContent = 'プッシュ通知の送信リクエストが完了しました。';
            } else {
                const error = await response.json();
                resultElement.textContent = `エラー: ${error.message}`;
            }
        } catch (error) {
            console.error('プッシュ通知の送信に失敗しました:', error);
            resultElement.textContent = `エラー: ${error.message}`;
        }
    });
</script>

