---
layout: base.njk
title: まぐにぃゲーム実況本館 企画会議
header_title: まぐにぃゲーム実況本館 企画会議
header_subtitle: "@ゲームまぐにぃ / 月例企画会議イベント会場"
permalink: /plan/
pageStyles: |
    <style>
        .section-title { font-family: 'Roboto', sans-serif; font-weight: 900; font-size: 2.25rem; color: #333; text-align: center; margin-bottom: 1rem; border-bottom: 3px solid #6a994e; padding-bottom: 0.75rem; }
        .plan-card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06); padding: 1.5rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: transform 0.2s ease, box-shadow 0.2s ease; }
        .plan-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05); }
        .plan-card-title { color: #6a994e; font-weight: 700; font-size: 1.5rem; display: flex; align-items: center; }
        .plan-card-arrow { font-size: 1.5rem; color: #9ca3af; }
        #modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); z-index: 50; display: flex; justify-content: center; align-items: center; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; }
        #modal-overlay.visible { opacity: 1; visibility: visible; }
        #modal-content { background-color: white; padding: 2.5rem; border-radius: 1rem; width: 90%; max-width: 640px; max-height: 90vh; overflow-y: auto; transform: scale(0.95); transition: transform 0.3s ease; }
        #modal-overlay.visible #modal-content { transform: scale(1); }
        #modal-close { position: absolute; top: 1rem; right: 1.5rem; font-size: 2.5rem; color: #9ca3af; cursor: pointer; line-height: 1; }
        #modal-close:hover { color: #1f2937; }
        .modal-description-text { color: #374151; line-height: 1.8; font-size: 1.125rem; margin-top: 1rem; }
        .modal-description-text p:first-child { margin-top: 0; }
        .modal-description-text p:last-child { margin-bottom: 0; }
        .modal-description-text img { max-width: 100%; height: auto; border-radius: 0.5rem; margin-top: 1rem; display: block; }
        .date-badge { background-color: #6a994e; color: white; font-size: 0.9rem; font-weight: bold; display: inline-block; }
        #whiteboard-area { background-color: #f8f8f8; border: 2px solid #ccc; border-radius: 8px; padding: 1.5rem; min-height: 300px; line-height: 1.8; font-size: 1rem; outline: none; box-shadow: inset 0 2px 4px rgba(0,0,0,0.05); cursor: not-allowed; }
        #whiteboard-area.editable { background-color: #fffff0; border-color: #6a994e; cursor: text; }
        #whiteboard-area.editable:focus { box-shadow: inset 0 2px 4px rgba(0,0,0,0.05), 0 0 0 3px rgba(106, 153, 78, 0.4); }
        #suggestion-wrapper { transition: all 0.5s ease-in-out; max-height: 0; opacity: 0; overflow: hidden; }
        #suggestion-wrapper.open { max-height: 1000px; opacity: 1; }
        #owner-controls { display: none; }
        #owner-controls.visible { display: block; }
        #suggestion-list { margin-top: 1rem; max-height: 400px; overflow-y: auto; background-color: #f9f9f9; padding: 1rem; border-radius: 8px; }
        .suggestion-item { position: relative; background-color: white; padding: 0.75rem 1rem; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 0.5rem; padding-right: 2.5rem; }
        .delete-suggestion-btn { display: none; position: absolute; top: 50%; right: 0.5rem; transform: translateY(-50%); background-color: #ef4444; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; font-weight: bold; line-height: 24px; text-align: center; cursor: pointer; transition: background-color 0.2s; }
        .delete-suggestion-btn:hover { background-color: #dc2626; }
        #suggestion-list.owner-view .delete-suggestion-btn { display: block; }
        
        /* ▼▼▼ ランキングリスト用のスタイル ▼▼▼ */
        #playlist-container-visible { position: relative; }
        #playlist-scroll-wrapper { display: flex; overflow-x: auto; padding: 1.5rem; gap: 1rem; -webkit-overflow-scrolling: touch; scrollbar-width: none; -ms-overflow-style: none; scroll-behavior: smooth; margin: 0 -1.5rem; /* for seamless scroll */}
        #playlist-scroll-wrapper::-webkit-scrollbar { display: none; }
        .playlist-video-card-wrapper { position: relative; flex: 0 0 280px; width: 280px; }
        .ranking-badge { position: absolute; top: -10px; left: -10px; background-color: #e53e3e; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: bold; z-index: 5; font-size: 1.25rem; border: 2px solid white; }
        .ranking-badge-1 { background-color: #ecc94b; color: #1a202c; } /* Gold */
        .ranking-badge-2 { background-color: #d6d6d6; color: #1a202c; } /* Silver */
        .ranking-badge-3 { background-color: #cd7f32; color: white; } /* Bronze */
        .video-stats { display: flex; justify-content: space-around; padding: 0 1rem 1rem; font-size: 0.9rem; color: #cbd5e0; }
        .scroll-btn { position: absolute; top: 50%; transform: translateY(-50%); z-index: 10; background-color: rgba(45, 55, 72, 0.8); color: white; border: none; border-radius: 50%; width: 40px; height: 40px; font-size: 20px; cursor: pointer; transition: background-color 0.2s, opacity 0.3s; display: none; }
        .scroll-btn:hover { background-color: #4a5568; }
        #scroll-left-btn { left: 10px; }
        #scroll-right-btn { right: 10px; }
        @media (min-width: 768px) { .scroll-btn { display: block; } }
        .scroll-btn.hidden { opacity: 0; pointer-events: none; }
        /* ▲▲▲ ここまでランキングリスト用のスタイル ▲▲▲ */
    </style>
---
<div class="max-w-7xl mx-auto p-4 sm:p-6">
    <section class="mb-12 mt-8">
        <h2 class="section-title">🎉 8月の決定済み企画 🎉</h2>
        <div class="space-y-4 mt-8">
            {%- for plan in siteContent.mainPlans -%}
            <div class="plan-card" data-plan-id="main-{{ loop.index }}" data-title="{{ plan.fields.title }}" data-date="{{ plan.fields.date }}">
                <h3 class="plan-card-title"><span class="mr-3 text-3xl">🗓️</span>{{ plan.fields.cardTitle }}</h3>
                <div class="plan-card-arrow">▶</div>
            </div>
            <template id="plan-content-main-{{ loop.index }}">{{ plan.fields.description | markdownToHtml | safe }}</template>
            {%- endfor -%}
        </div>
    </section>

    <section class="mb-12">
        <h2 class="section-title">🤝 コラボ企画 🤝</h2>
        <div class="space-y-4 mt-8">
            {%- for plan in siteContent.collabPlans -%}
            <div class="plan-card" data-plan-id="collab-{{ loop.index }}" data-title="{{ plan.fields.title }}" data-date="{{ plan.fields.date }}" data-link="{{ plan.fields.link }}" data-link-text="{{ plan.fields.linkText }}">
                <h3 class="plan-card-title"><span class="mr-3 text-3xl">🤝</span>{{ plan.fields.cardTitle }}</h3>
                <div class="plan-card-arrow">▶</div>
            </div>
            <template id="plan-content-collab-{{ loop.index }}">{{ plan.fields.description | markdownToHtml | safe }}</template>
            {%- endfor -%}
        </div>
    </section>

    <section class="mt-16">
        <h2 class="section-title">📝 企画会議ホワイトボード 📝</h2>
        <div class="bg-white p-6 rounded-lg shadow-inner mt-8">
            <div id="whiteboard-area" title="オーナーとしてログインすると編集できます"></div>
            <div id="owner-controls" class="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <p class="font-bold text-green-800">オーナー用パネル</p>
                <button id="toggle-suggestions-btn" class="mt-2 bg-blue-600 text-white font-bold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm">アイデア受付を管理</button>
            </div>
            <div id="suggestion-wrapper">
                <div id="suggestion-box">
                    <p class="font-bold mt-6 mb-2">💡 みんなのアイデア投稿箱</p>
                    <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                        <input type="text" id="suggestion-input" class="flex-grow border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="企画アイデアをどうぞ！">
                        <button id="suggestion-submit" class="bg-green-600 text-white font-bold px-6 py-2 rounded-lg hover:bg-green-700 transition-colors">投稿</button>
                    </div>
                </div>
                <div id="suggestion-list" class="mt-4"></div>
            </div>
        </div>
    </section>

    {# ▼▼▼ ランキングリストのセクションを更新しました ▼▼▼ #}
    <section class="mt-16 bg-gray-800 rounded-lg py-8 px-2">
        <h2 class="text-3xl font-bold text-center text-white mb-6">過去の企画会議で生まれた人気動画ランキング👑</h2>
        <div id="playlist-container-visible" class="relative">
            <button id="scroll-left-btn" class="scroll-btn hidden" aria-label="Scroll Left">‹</button>
            {% if youtube.planningPlaylist.length > 0 %}
                <div id="playlist-scroll-wrapper">
                {% for item in youtube.planningPlaylist %}
                    <div class="playlist-video-card-wrapper">
                        <span class="ranking-badge ranking-badge-{{ loop.index }}">{{ loop.index }}</span>
                        <a href="https://www.youtube.com/watch?v={{ item.id }}" target="_blank" rel="noopener noreferrer" class="group block bg-gray-700 rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300 h-full flex flex-col">
                            <div class="relative">
                                <img src="{{ item.snippet.thumbnails.medium.url }}" alt="{{ item.snippet.title }}" class="w-full h-auto aspect-video object-cover group-hover:scale-105 transition-transform duration-300" loading="lazy">
                            </div>
                            <div class="p-4 flex flex-col flex-grow">
                                <h3 class="text-white font-semibold leading-tight flex-grow mb-2">{{ item.snippet.title }}</h3>
                                <div class="video-stats border-t border-gray-600 pt-2 mt-auto">
                                    <span>👁️ {{ item.statistics.viewCount | numberFormat }}</span>
                                    <span>👍 {{ item.statistics.likeCount | numberFormat }}</span>
                                </div>
                            </div>
                        </a>
                    </div>
                {% endfor %}
                </div>
            {% else %}
                <p class="text-center text-gray-400 p-8">現在、表示できる動画がありません。</p>
            {% endif %}
            <button id="scroll-right-btn" class="scroll-btn" aria-label="Scroll Right">›</button>
        </div>
    </section>
    {# ▲▲▲ ここまでがランキングリストのセクションです ▲▲▲ #}
</div>

<div id="modal-overlay"><div id="modal-content"><div id="modal-close">&times;</div><h2 id="modal-title" class="text-4xl font-bold text-gray-800"></h2><div id="modal-date" class="mt-4 mb-6"></div><div id="modal-description" class="modal-description-text"></div><div id="modal-link-container" class="mt-6 text-right"></div></div></div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, setDoc, onSnapshot, collection, addDoc, serverTimestamp, query, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    document.addEventListener('DOMContentLoaded', async () => {
        // ... (Firebaseのコードは変更なし) ...
        const firebaseConfig = { apiKey: "AIzaSyDwjh5FCorVXZDdMse_uTcLbvjXwmw2jhk", authDomain: "maguro29-planning.firebaseapp.com", projectId: "maguro29-planning", storageBucket: "maguro29-planning.appspot.com", messagingSenderId: "525505583082", appId: "1:525505583082:web:2cb02294dfd3d9ca91c493" };
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);
        let userId = null;
        let isOwner = false;
        try { await signInAnonymously(auth); userId = auth.currentUser.uid; } catch (error) { console.error("Anonymous Auth Error:", error); }
        const whiteboardArea = document.getElementById('whiteboard-area');
        const ownerControls = document.getElementById('owner-controls');
        const toggleSuggestionsBtn = document.getElementById('toggle-suggestions-btn');
        const suggestionWrapper = document.getElementById('suggestion-wrapper');
        const suggestionList = document.getElementById('suggestion-list');
        const ownerPassword = "Flexiblefish354";
        document.addEventListener('keydown', (e) => { if (e.key.toLowerCase() === 'm' && !isOwner) { const inputPassword = prompt("オーナー用パスワードを入力してください:"); if (inputPassword === ownerPassword) { isOwner = true; enableEditing(); alert("オーナーとしてログインしました。"); } else if (inputPassword) { alert("パスワードが違います。"); } } });
        function enableEditing() { whiteboardArea.contentEditable = true; whiteboardArea.classList.add('editable'); whiteboardArea.title = "ここにメモを入力できます"; ownerControls.classList.add('visible'); suggestionList.classList.add('owner-view'); let debounceTimer; whiteboardArea.addEventListener('input', () => { clearTimeout(debounceTimer); debounceTimer = setTimeout(() => { setDoc(eventDocRef, { content: whiteboardArea.innerHTML }, { merge: true }); }, 500); }); }
        function launchConfetti() { if (typeof confetti === 'function') { confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } }); } }
        const planCards = document.querySelectorAll('.plan-card');
        const modalOverlay = document.getElementById('modal-overlay');
        planCards.forEach(card => { card.addEventListener('click', () => { launchConfetti(); document.getElementById('modal-title').innerHTML = card.dataset.title; document.getElementById('modal-date').innerHTML = `<span class="date-badge py-2 px-4 rounded-lg">${card.dataset.date}</span>`; const planId = card.dataset.planId; const descriptionDiv = document.getElementById('modal-description'); descriptionDiv.innerHTML = ''; if (planId) { const template = document.getElementById(`plan-content-${planId}`); if (template) { descriptionDiv.appendChild(template.content.cloneNode(true)); const linksInDescription = descriptionDiv.querySelectorAll('a'); linksInDescription.forEach(link => { link.target = '_blank'; link.rel = 'noopener noreferrer'; }); } } const linkContainer = document.getElementById('modal-link-container'); linkContainer.innerHTML = ''; if (card.dataset.link) { const link = document.createElement('a'); link.href = card.dataset.link; link.target = '_blank'; link.rel = 'noopener noreferrer'; link.className = 'inline-block bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-full hover:bg-gray-300 transition-colors duration-300'; link.textContent = card.dataset.linkText || '詳細を見る'; linkContainer.appendChild(link); } modalOverlay.classList.add('visible'); }); });
        function closeModal() { modalOverlay.classList.remove('visible'); }
        document.getElementById('modal-close').addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (event) => { if (event.target === modalOverlay) { closeModal(); } });
        const suggestionInput = document.getElementById('suggestion-input');
        const suggestionSubmit = document.getElementById('suggestion-submit');
        const eventDocRef = doc(db, "planning_data/main");
        const suggestionsColRef = collection(db, "planning_data/main/suggestions");
        const placeholderMemo = `<h3>【企画会議ホワイトボード】</h3><ul><li><strong>新しいMODシリーズ：</strong></li></ul><p><em>ここにアイデアを書き込んでいきましょう！</em></p>`;
        let isSuggestionsOpen = false;
        onSnapshot(eventDocRef, (doc) => { const data = doc.exists() ? doc.data() : {}; const content = data.content || placeholderMemo; if (whiteboardArea.innerHTML !== content) { whiteboardArea.innerHTML = content; } isSuggestionsOpen = data.isOpen || false; if (isSuggestionsOpen) { suggestionWrapper.classList.add('open'); } else { suggestionWrapper.classList.remove('open'); } if (isOwner) { toggleSuggestionsBtn.textContent = isSuggestionsOpen ? 'アイデア受付を終了する' : 'アイデア受付を開始する'; toggleSuggestionsBtn.classList.toggle('bg-red-600', isSuggestionsOpen); toggleSuggestionsBtn.classList.toggle('hover:bg-red-700', isSuggestionsOpen); toggleSuggestionsBtn.classList.toggle('bg-blue-600', !isSuggestionsOpen); toggleSuggestionsBtn.classList.toggle('hover:bg-blue-700', !isSuggestionsOpen); } });
        toggleSuggestionsBtn.addEventListener('click', () => { setDoc(eventDocRef, { isOpen: !isSuggestionsOpen }, { merge: true }); });
        suggestionSubmit.addEventListener('click', async () => { const text = suggestionInput.value.trim(); if (text && userId) { try { await addDoc(suggestionsColRef, { text: text, author: userId.substring(0, 6), createdAt: serverTimestamp() }); suggestionInput.value = ''; } catch (error) { console.error("Error adding suggestion:", error); } } });
        suggestionInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { suggestionSubmit.click(); } });
        const q = query(suggestionsColRef);
        onSnapshot(q, (snapshot) => { suggestionList.innerHTML = ''; snapshot.forEach((doc) => { const data = doc.data(); const item = document.createElement('div'); item.className = 'suggestion-item'; const itemText = document.createElement('span'); itemText.textContent = `💡 ${data.text}`; item.appendChild(itemText); const deleteBtn = document.createElement('button'); deleteBtn.className = 'delete-suggestion-btn'; deleteBtn.textContent = '×'; deleteBtn.onclick = async () => { try { await deleteDoc(doc.ref); } catch (error) { console.error("Error removing document: ", error); } }; item.appendChild(deleteBtn); suggestionList.appendChild(item); }); });

        // ▼▼▼ 横スクロールを制御するJavaScript (アコーディオンのロジックは削除) ▼▼▼
        const scrollWrapper = document.getElementById('playlist-scroll-wrapper');
        const scrollLeftBtn = document.getElementById('scroll-left-btn');
        const scrollRightBtn = document.getElementById('scroll-right-btn');

        if (scrollWrapper && scrollLeftBtn && scrollRightBtn) {
            const scrollAmount = 300; // 一度にスクロールする量
            const updateArrowVisibility = () => {
                if (scrollWrapper.scrollWidth <= scrollWrapper.clientWidth) {
                    scrollLeftBtn.classList.add('hidden');
                    scrollRightBtn.classList.add('hidden');
                    return;
                }
                scrollLeftBtn.classList.toggle('hidden', scrollWrapper.scrollLeft <= 0);
                scrollRightBtn.classList.toggle('hidden', scrollWrapper.scrollLeft >= scrollWrapper.scrollWidth - scrollWrapper.clientWidth - 1);
            };
            scrollLeftBtn.addEventListener('click', () => { scrollWrapper.scrollLeft -= scrollAmount; });
            scrollRightBtn.addEventListener('click', () => { scrollWrapper.scrollLeft += scrollAmount; });
            scrollWrapper.addEventListener('scroll', updateArrowVisibility);
            
            // ページ読み込み時とリサイズ時に矢印の状態をチェック
            // 少し遅延させて実行することで、画像の読み込み後の正しい幅で計算させる
            setTimeout(updateArrowVisibility, 500);
            window.addEventListener('resize', updateArrowVisibility);
        }
        // ▲▲▲ ここまでが横スクロール用のJavaScriptです ▲▲▲
    });
</script>