---
layout: base.njk
title: まぐにぃゲーム実況本館 今月の企画
header_title: まぐにぃゲーム実況本館 今月の企画
header_subtitle: "@ゲームまぐにぃ / 月例企画会議イベント会場"
permalink: /plan/
pageStyles: |
    <style>
        .section-title { font-family: 'Roboto', sans-serif; font-weight: 900; font-size: 2.25rem; color: #333; text-align: center; margin-bottom: 1rem; border-bottom: 3px solid #6a994e; padding-bottom: 0.75rem; }
        .plan-card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1), 0 2px 4px -1px rgba(0,0,0,0.06); padding: 1.5rem; cursor: pointer; display: flex; justify-content: space-between; align-items: center; transition: transform 0.2s ease, box-shadow 0.2s ease; }
        .plan-card:hover { transform: translateY(-4px); box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -2px rgba(0,0,0,0.05); }
        .plan-card-title { color: #6a994e; font-weight: 700; font-size: 1.5rem; display: flex; align-items: center; }
        .plan-card-arrow { font-size: 1.5rem; color: #9ca3af; }
        #modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.7); z-index: 50; display: flex; justify-content: center; align-items: center; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; }
        #modal-overlay.visible { opacity: 1; visibility: visible; }
        
        #modal-content { 
            position: relative; 
            padding: 2.5rem; 
            border-radius: 1rem; 
            width: 90%; 
            max-width: 800px;
            max-height: 95vh;
            overflow-y: auto; 
            transform: scale(0.95); 
            transition: transform 0.3s ease;
            background-color: white;
            background-image: url("https://i.imgur.com/ew3XjDq.png");
            background-size: cover;
            background-position: center;
            border: 3px solid #6a994e;
        }
        #modal-overlay.visible #modal-content { transform: scale(1); }
        #modal-close { position: absolute; top: 1rem; right: 1.5rem; font-size: 2.5rem; color: #9ca3af; cursor: pointer; line-height: 1; z-index: 10; }
        #modal-close:hover { color: #1f2937; }

        .modal-description-text { 
            color: #374151; 
            line-height: 1.8; 
            font-size: 1.125rem; 
            margin-top: 1rem;
            text-shadow: 0px 0px 8px rgba(255, 255, 255, 0.8), 0px 0px 8px rgba(255, 255, 255, 0.8);
        }
        .modal-description-text p:first-child { margin-top: 0; }
        .modal-description-text p:last-child { margin-bottom: 0; }
        .modal-description-text img { max-width: 100%; height: auto; border-radius: 0.5rem; margin-top: 1rem; display: block; }
        .date-badge { background-color: #6a994e; color: white; font-size: 0.9rem; font-weight: bold; display: inline-block; }
        #whiteboard-area { background-color: #f8f8f8; border: 2px solid #ccc; border-radius: 8px; padding: 1.5rem; min-height: 300px; line-height: 1.8; font-size: 1rem; outline: none; box-shadow: inset 0 2px 4px rgba(0,0,0,0.05); }
        #whiteboard-area.editable { background-color: #fffff0; border-color: #6a994e; }
        #whiteboard-area.editable:focus { box-shadow: inset 0 2px 4px rgba(0,0,0,0.05), 0 0 0 3px rgba(106, 153, 78, 0.4); }
        #suggestion-wrapper { transition: all 0.5s ease-in-out; max-height: 0; opacity: 0; overflow: hidden; }
        #suggestion-wrapper.open { max-height: 1000px; opacity: 1; }
        .suggestion-item { position: relative; background-color: white; padding: 0.75rem 1rem; border-radius: 6px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); margin-bottom: 0.5rem; padding-right: 2.5rem; }
        .delete-suggestion-btn { display: none; position: absolute; top: 50%; right: 0.5rem; transform: translateY(-50%); background-color: #ef4444; color: white; border: none; border-radius: 50%; width: 24px; height: 24px; font-weight: bold; line-height: 24px; text-align: center; cursor: pointer; transition: background-color 0.2s; }
        .delete-suggestion-btn:hover { background-color: #dc2626; }
        
        /* ランキングリスト用のスタイル */
        #playlist-scroll-wrapper { display: flex; overflow-x: auto; padding-bottom: 1.5rem; gap: 1.5rem; -webkit-overflow-scrolling: touch; scrollbar-width: none; -ms-overflow-style: none; scroll-behavior: smooth; }
        #playlist-scroll-wrapper::-webkit-scrollbar { display: none; }
        .playlist-video-card { position: relative; flex: 0 0 280px; width: 280px; padding-top: 15px; }
        .ranking-badge { position: absolute; top: 0; left: 0; background-color: #e53e3e; color: white; border-radius: 50%; width: 40px; height: 40px; display: flex; align-items: center; justify-content: center; font-weight: bold; z-index: 5; font-size: 1.25rem; border: 2px solid white; }
        .ranking-badge-1 { background-color: #ecc94b; color: #1a202c; }
        .ranking-badge-2 { background-color: #d6d6d6; color: #1a202c; }
        .ranking-badge-3 { background-color: #cd7f32; color: white; }
        .video-stats { display: flex; justify-content: space-around; padding: 0 1rem 1rem; font-size: 0.9rem; color: #4a5568; }
        .scroll-btn { position: absolute; top: 50%; transform: translateY(-50%); z-index: 10; background-color: rgba(255, 255, 255, 0.9); color: #4a5568; border: 1px solid #e2e8f0; box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1); border-radius: 50%; width: 40px; height: 40px; font-size: 20px; cursor: pointer; transition: all 0.2s; display: none; }
        .scroll-btn:hover { background-color: #fff; transform: translateY(-50%) scale(1.1); }
        #scroll-left-btn { left: -20px; }
        #scroll-right-btn { right: -20px; }
        @media (min-width: 768px) { .scroll-btn { display: block; } }
        .scroll-btn.hidden { opacity: 0; pointer-events: none; }

        #capture-modal-btn { position: absolute; bottom: 1rem; right: 1rem; z-index: 10; width: 50px; height: 50px; font-size: 1.5rem; display: flex; align-items: center; justify-content: center; border-radius: 9999px; transition: all 0.2s ease-in-out; background-color: #6a994e; color: white; box-shadow: 0 4px 6px rgba(0,0,0,0.1); }
        #capture-modal-btn:hover { transform: scale(1.1); }
        .modal-character { position: absolute; top: 50px; right: 20px; width: 120px; height: auto; z-index: 1; pointer-events: none; }

        #modal-content.screenshot-mode .modal-description-text,
        #modal-content.screenshot-mode #modal-title { transform: translateY(-5px); }
        #modal-content.screenshot-mode .date-badge-text { display: inline-block; transform: translateY(-5px); }
    </style>
---
<div class="max-w-7xl mx-auto p-4 sm:p-6">

    <div id="admin-auth-section" class="my-8 p-4 bg-gray-100 rounded-lg flex justify-center items-center min-h-[52px] hidden">
        <button id="admin-login-btn" class="bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors">管理者としてGoogleログイン</button>
        <div id="admin-info" class="hidden items-center justify-center space-x-4">
            <p id="admin-name" class="font-bold"></p>
            <button id="admin-logout-btn" class="bg-gray-500 text-white font-bold py-1 px-3 rounded-lg hover:bg-gray-600 transition-colors text-sm">ログアウト</button>
        </div>
    </div>
    
    <section id="main-plans" class="mb-12">
        <h2 class="section-title">🎉 今月の決定済み企画 🎉</h2>
        <div class="space-y-4 mt-8">
            {%- for plan in siteContent.mainPlans -%}
            <div class="plan-card" data-plan-id="main-{{ loop.index }}" data-title="{{ plan.fields.title }}" data-date="{{ plan.fields.date }}">
                <h3 class="plan-card-title"><span class="mr-3 text-3xl">🗓️</span>{{ plan.fields.cardTitle }}</h3>
                <div class="plan-card-arrow">▶</div>
            </div>
            <template id="plan-content-main-{{ loop.index }}">{{ plan.fields.description | markdownToHtml | safe }}</template>
            {%- endfor -%}
        </div>
    </section>

    <section id="collab-plans" class="mb-12">
        <h2 class="section-title">🤝 コラボ企画 🤝</h2>
        <div class="space-y-4 mt-8">
            {%- for plan in siteContent.collabPlans -%}
            <div class="plan-card" data-plan-id="collab-{{ loop.index }}" data-title="{{ plan.fields.title }}" data-date="{{ plan.fields.date }}" data-link="{{ plan.fields.link }}" data-link-text="{{ plan.fields.linkText }}">
                <h3 class="plan-card-title"><span class="mr-3 text-3xl">🤝</span>{{ plan.fields.cardTitle }}</h3>
                <div class="plan-card-arrow">▶</div>
            </div>
            <template id="plan-content-collab-{{ loop.index }}">{{ plan.fields.description | markdownToHtml | safe }}</template>
            {%- endfor -%}
        </div>
    </section>

    <section id="whiteboard" class="mt-16">
        <h2 class="section-title">📝 企画会議ホワイトボード 📝</h2>
        <div class="bg-white p-6 rounded-lg shadow-inner mt-8">
            <div id="whiteboard-area" contenteditable="false"></div>
            <div id="owner-controls" class="hidden mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                <p class="font-bold text-green-800">オーナー用パネル</p>
                <button id="toggle-suggestions-btn" class="mt-2 bg-blue-600 text-white font-bold px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors text-sm">アイデア受付を管理</button>
            </div>
            <div id="suggestion-wrapper">
                <div id="suggestion-box">
                    <p class="font-bold mt-6 mb-2">💡 みんなのアイデア投稿箱</p>
                    <div class="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-2">
                        <input type="text" id="suggestion-input" class="flex-grow border border-gray-300 rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="企画アイデアをどうぞ！">
                        <button id="suggestion-submit" class="bg-green-600 text-white font-bold px-6 py-2 rounded-lg hover:bg-green-700 transition-colors">投稿</button>
                    </div>
                </div>
                <div id="suggestion-list" class="mt-4"></div>
            </div>
        </div>
    </section>

    <section id="ranking" class="mt-16">
        <h2 class="section-title">👑 企画会議の人気動画ランキング 👑</h2>
        <div class="relative mt-8">
            <button id="scroll-left-btn" class="scroll-btn hidden" aria-label="Scroll Left">‹</button>
            {% if youtube.planningPlaylist.length > 0 %}
                <div id="playlist-scroll-wrapper" class="px-2">
                {% for item in youtube.planningPlaylist %}
                    <a href="https://www.youtube.com/watch?v={{ item.id }}" target="_blank" rel="noopener noreferrer" class="group block bg-white rounded-lg overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300 playlist-video-card">
                        <div class="relative">
                            <span class="ranking-badge ranking-badge-{{ loop.index }}">{{ loop.index }}</span>
                            <img src="{{ item.snippet.thumbnails.medium.url }}" alt="{{ item.snippet.title }}" class="w-full h-auto aspect-video object-cover group-hover:scale-105 transition-transform duration-300 rounded-t-lg" loading="lazy">
                        </div>
                        <div class="p-4 flex flex-col flex-grow">
                            <h3 class="text-gray-800 font-semibold leading-tight flex-grow mb-2">{{ item.snippet.title }}</h3>
                            <div class="video-stats border-t border-gray-200 pt-2 mt-auto">
                                <span>👁️ {{ item.statistics.viewCount | commaNumber }}</span>
                                <span>👍 {{ item.statistics.likeCount | commaNumber }}</span>
                            </div>
                        </div>
                    </a>
                {% endfor %}
                </div>
            {% else %}
                <p class="text-center text-gray-500 p-8">現在、表示できる動画がありません。</p>
            {% endif %}
            <button id="scroll-right-btn" class="scroll-btn" aria-label="Scroll Right">›</button>
        </div>
        
        <div class="text-center mt-12">
            <a href="/archive/#plan-archive-section" class="inline-block bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-full hover:bg-gray-300 transition-colors duration-300">
                過去の企画はこちら
            </a>
        </div>
    </section>
</div>

<div id="modal-overlay">
    <div id="modal-content">
        <img src="https://i.imgur.com/r5Novxv.png" alt="キャラクター" class="modal-character">
        <div id="modal-close">&times;</div>
        <div style="position: relative; z-index: 2;">
            <h2 id="modal-title" class="text-4xl font-bold text-gray-800"></h2>
            <div id="modal-date" class="mt-4 mb-6"></div>
            <div id="modal-description" class="modal-description-text"></div>
            <div id="modal-link-container" class="mt-6 text-right"></div>
        </div>
        <button id="capture-modal-btn" title="この企画を画像でシェア">📷️</button>
    </div>
</div>

<script type="module">
    // Firebase SDKの必要な関数をインポート
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, onAuthStateChanged, signInWithPopup, GoogleAuthProvider, signOut, signInAnonymously } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, doc, setDoc, onSnapshot, collection, addDoc, serverTimestamp, query, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    document.addEventListener('DOMContentLoaded', () => {
        // Firebaseの初期化
        const firebaseConfig = { apiKey: "AIzaSyDwjh5FCorVXZDdMse_uTcLbvjXwmw2jhk", authDomain: "maguro29-planning.firebaseapp.com", projectId: "maguro29-planning", storageBucket: "maguro29-planning.appspot.com", messagingSenderId: "525505583082", appId: "1:525505583082:web:2cb02294dfd3d9ca91c493" };
        const app = initializeApp(firebaseConfig);
        const auth = getAuth(app);
        const db = getFirestore(app);

        let currentUser = null;
        let isOwner = false;

        // 必要なHTML要素を取得
        const adminAuthSection = document.getElementById('admin-auth-section');
        const whiteboardArea = document.getElementById('whiteboard-area');
        const ownerControls = document.getElementById('owner-controls');
        const suggestionList = document.getElementById('suggestion-list');
        const adminLoginBtn = document.getElementById('admin-login-btn');
        const adminLogoutBtn = document.getElementById('admin-logout-btn');
        const adminInfo = document.getElementById('admin-info');
        const adminName = document.getElementById('admin-name');
        const toggleSuggestionsBtn = document.getElementById('toggle-suggestions-btn');
        const suggestionWrapper = document.getElementById('suggestion-wrapper');

        // --- 【追加】秘密のキーでログインボタンを表示 ---
        document.addEventListener('keydown', (e) => {
            if (e.key.toLowerCase() === 'm' && !isOwner) {
                adminAuthSection.classList.remove('hidden');
            }
        });

        // --- ログイン状態の監視 ---
        onAuthStateChanged(auth, async (user) => {
            currentUser = user;
            if (user && !user.isAnonymous) {
                // Googleアカウントでログインしている場合
                const idTokenResult = await user.getIdTokenResult();
                isOwner = idTokenResult.claims.admin === true;

                if (isOwner) {
                    adminAuthSection.classList.remove('hidden');
                    adminLoginBtn.style.display = 'none';
                    adminInfo.classList.remove('hidden');
                    adminName.textContent = `管理者: ${user.displayName || user.email}`;
                    enableEditing();
                } else {
                    // 管理者ではないGoogleアカウントの場合
                    signOut(auth); // 強制的にログアウトさせる
                }
            } else {
                // ログアウトしているか、匿名ユーザーの場合
                isOwner = false;
                adminLoginBtn.style.display = 'block';
                adminInfo.classList.add('hidden');
                disableEditing();
                if (!user) {
                    signInAnonymously(auth).catch(error => console.error("Anonymous sign-in failed:", error));
                }
            }
        });

        // --- 管理者ログイン処理 ---
        adminLoginBtn.addEventListener('click', () => {
            const provider = new GoogleAuthProvider();
            signInWithPopup(auth, provider).catch(error => console.error("Google sign-in failed:", error));
        });

        // --- ログアウト処理 ---
        adminLogoutBtn.addEventListener('click', () => {
            signOut(auth).catch(error => console.error("Sign-out failed:", error));
        });

        // --- 編集モードの有効/無効 ---
        function enableEditing() {
            whiteboardArea.contentEditable = true;
            whiteboardArea.classList.add('editable');
            ownerControls.classList.remove('hidden');
            suggestionList.classList.add('owner-view');
        }

        function disableEditing() {
            whiteboardArea.contentEditable = false;
            whiteboardArea.classList.remove('editable');
            ownerControls.classList.add('hidden');
            suggestionList.classList.remove('owner-view');
        }
        
        // --- ホワイトボードのリアルタイム更新 ---
        const eventDocRef = doc(db, "planning_data/main");
        onSnapshot(eventDocRef, (doc) => {
            const data = doc.exists() ? doc.data() : {};
            const content = data.content || `<h3>【企画会議ホワイトボード】</h3><ul><li><strong>新しいMODシリーズ：</strong></li></ul><p><em>ここにアイデアを書き込んでいきましょう！</em></p>`;
            if (whiteboardArea.innerHTML !== content) {
                whiteboardArea.innerHTML = content;
            }
            const isSuggestionsOpen = data.isOpen || false;
            if (isSuggestionsOpen) {
                suggestionWrapper.classList.add('open');
            } else {
                suggestionWrapper.classList.remove('open');
            }
            if (isOwner) {
                toggleSuggestionsBtn.textContent = isSuggestionsOpen ? 'アイデア受付を終了する' : 'アイデア受付を開始する';
                toggleSuggestionsBtn.classList.toggle('bg-red-600', isSuggestionsOpen);
                toggleSuggestionsBtn.classList.toggle('hover:bg-red-700', isSuggestionsOpen);
                toggleSuggestionsBtn.classList.toggle('bg-blue-600', !isSuggestionsOpen);
                toggleSuggestionsBtn.classList.toggle('hover:bg-blue-700', !isSuggestionsOpen);
            }
        });

        // ホワイトボードの編集内容をDBに保存
        let debounceTimer;
        whiteboardArea.addEventListener('input', () => {
            if (isOwner) {
                clearTimeout(debounceTimer);
                debounceTimer = setTimeout(() => {
                    setDoc(eventDocRef, { content: whiteboardArea.innerHTML }, { merge: true });
                }, 500);
            }
        });

        // --- アイデア投稿機能 ---
        const suggestionsColRef = collection(db, "planning_data/main/suggestions");
        toggleSuggestionsBtn.addEventListener('click', () => {
             const currentIsOpen = suggestionWrapper.classList.contains('open');
             setDoc(eventDocRef, { isOpen: !currentIsOpen }, { merge: true });
        });

        const suggestionInput = document.getElementById('suggestion-input');
        const suggestionSubmit = document.getElementById('suggestion-submit');
        suggestionSubmit.addEventListener('click', async () => {
            const text = suggestionInput.value.trim();
            if (text && currentUser) {
                try {
                    await addDoc(suggestionsColRef, { text: text, author: currentUser.uid.substring(0, 6), createdAt: serverTimestamp() });
                    suggestionInput.value = '';
                } catch (error) { console.error("Error adding suggestion:", error); }
            }
        });
        suggestionInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { suggestionSubmit.click(); } });

        // アイデアリストのリアルタイム表示
        const q = query(suggestionsColRef);
        onSnapshot(q, (snapshot) => {
            suggestionList.innerHTML = '';
            snapshot.forEach((doc) => {
                const data = doc.data();
                const item = document.createElement('div');
                item.className = 'suggestion-item';
                item.textContent = `💡 ${data.text}`;
                if(isOwner) {
                    const deleteBtn = document.createElement('button');
                    deleteBtn.className = 'delete-suggestion-btn';
                    deleteBtn.textContent = '×';
                    deleteBtn.style.display = 'block';
                    deleteBtn.onclick = async () => { await deleteDoc(doc.ref); };
                    item.appendChild(deleteBtn);
                }
                suggestionList.appendChild(item);
            });
        });

        // --- ここから下は、元のファイルのモーダルやスクロールなどのUI制御ロジック（変更なし） ---
        function launchConfetti() { if (typeof confetti === 'function') { confetti({ particleCount: 100, spread: 70, origin: { y: 0.6 } }); } }
        const planCards = document.querySelectorAll('.plan-card');
        const modalOverlay = document.getElementById('modal-overlay');
        planCards.forEach(card => { card.addEventListener('click', () => { 
            launchConfetti(); 
            document.getElementById('modal-title').innerHTML = card.dataset.title; 
            document.getElementById('modal-date').innerHTML = `<span class="date-badge py-2 px-4 rounded-lg"><span class="date-badge-text">${card.dataset.date}</span></span>`; 
            const planId = card.dataset.planId; 
            const descriptionDiv = document.getElementById('modal-description'); 
            descriptionDiv.innerHTML = ''; 
            if (planId) { 
                const template = document.getElementById(`plan-content-${planId}`); 
                if (template) { 
                    descriptionDiv.appendChild(template.content.cloneNode(true)); 
                    const linksInDescription = descriptionDiv.querySelectorAll('a'); 
                    linksInDescription.forEach(link => { 
                        link.target = '_blank'; 
                        link.rel = 'noopener noreferrer'; 
                    }); 
                } 
            } 
            const linkContainer = document.getElementById('modal-link-container'); 
            linkContainer.innerHTML = ''; 
            if (card.dataset.link) { 
                const link = document.createElement('a'); 
                link.href = card.dataset.link; 
                link.target = '_blank'; 
                link.rel = 'noopener noreferrer'; 
                link.className = 'inline-block bg-gray-200 text-gray-800 font-bold py-3 px-6 rounded-full hover:bg-gray-300 transition-colors duration-300'; 
                link.textContent = card.dataset.linkText || '詳細を見る'; 
                linkContainer.appendChild(link); 
            } 
            modalOverlay.classList.add('visible'); 
        }); });
        function closeModal() { modalOverlay.classList.remove('visible'); }
        document.getElementById('modal-close').addEventListener('click', closeModal);
        modalOverlay.addEventListener('click', (event) => { if (event.target === modalOverlay) { closeModal(); } });
        
        const scrollWrapper = document.getElementById('playlist-scroll-wrapper');
        const scrollLeftBtn = document.getElementById('scroll-left-btn');
        const scrollRightBtn = document.getElementById('scroll-right-btn');
        if (scrollWrapper && scrollLeftBtn && scrollRightBtn) {
            const scrollAmount = 300;
            const updateArrowVisibility = () => {
                if (scrollWrapper.scrollWidth <= scrollWrapper.clientWidth) {
                    scrollLeftBtn.classList.add('hidden');
                    scrollRightBtn.classList.add('hidden');
                    return;
                }
                scrollLeftBtn.classList.toggle('hidden', scrollWrapper.scrollLeft <= 0);
                scrollRightBtn.classList.toggle('hidden', scrollWrapper.scrollLeft >= scrollWrapper.scrollWidth - scrollWrapper.clientWidth - 1);
            };
            scrollLeftBtn.addEventListener('click', () => { scrollWrapper.scrollLeft -= scrollAmount; });
            scrollRightBtn.addEventListener('click', () => { scrollWrapper.scrollLeft += scrollAmount; });
            scrollWrapper.addEventListener('scroll', updateArrowVisibility);
            setTimeout(updateArrowVisibility, 500);
            window.addEventListener('resize', updateArrowVisibility);
        }

        const captureModalBtn = document.getElementById('capture-modal-btn');
        const modalContent = document.getElementById('modal-content');
        const modalTitle = document.getElementById('modal-title');
        if (captureModalBtn && modalContent && typeof html2canvas === 'function') {
            captureModalBtn.addEventListener('click', () => {
                const originalButtonContent = captureModalBtn.innerHTML;
                captureModalBtn.innerHTML = '...';
                captureModalBtn.disabled = true;
                captureModalBtn.style.display = 'none';
                modalContent.classList.add('screenshot-mode');
                setTimeout(() => {
                    html2canvas(modalContent, { useCORS: true, backgroundColor: null, scale: 2, allowTaint: true, ignoreElements: (element) => element.id === 'modal-close' || element.id === 'capture-modal-btn' }).then(canvas => {
                        const link = document.createElement('a');
                        const fileName = modalTitle.textContent.trim().replace(/\s+/g, '_') || 'plan';
                        link.download = `${fileName}.png`;
                        link.href = canvas.toDataURL('image/png');
                        link.click();
                    }).finally(() => {
                        modalContent.classList.remove('screenshot-mode');
                        captureModalBtn.innerHTML = originalButtonContent;
                        captureModalBtn.disabled = false;
                        captureModalBtn.style.display = 'flex';
                    });
                }, 100);
            });
        }
    });
</script>
<script>
document.addEventListener('DOMContentLoaded', () => {
    const navMenu = document.getElementById('page-nav-menu');
    if (!navMenu) return;

    const menuItems = [
        { href: '#main-plans', text: '🎉 決定済み企画' },
        { href: '#collab-plans', text: '🤝 コラボ企画' },
        { href: '#whiteboard', text: '📝 ホワイトボード' },
        { href: '#ranking', text: '👑 人気動画' },
        { href: '#top', text: '🔼 一番上へ' }
    ];

    menuItems.forEach(item => {
        const li = document.createElement('li');
        li.className = 'page-nav-item';
        const a = document.createElement('a');
        a.href = item.href;
        a.className = 'page-nav-link';
        a.textContent = item.text;
        li.appendChild(a);
        navMenu.appendChild(li);
    });
});
</script>